<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Robert Gunner Feie</title>
    <description>Website and blog for Robert Gunner Feie
</description>
    <link>http://rfeie.com/</link>
    <atom:link href="http://rfeie.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 05 Sep 2016 22:59:33 -0500</pubDate>
    <lastBuildDate>Mon, 05 Sep 2016 22:59:33 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Welcome to My New Site!</title>
        <description>&lt;p&gt;Good morning/afternoon/evening to whoever you are. 
Welcome to my new site. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;If you have read my about page I am sure you know I am a self-taight programmer. And as I have started to learn more and travelled further off the tutorial-beaten-path I realized I can share some of the knowledge I am starting to accrue with the hope of benefitting someone, somewhere.&lt;/p&gt;

&lt;p&gt;A couple notes about this site. This site is a staticly generated site written in Jekyll and hosted on &lt;a href=&quot;https://github.com/rfeie/rfeie.github.io&quot;&gt;Github&lt;/a&gt;. I used the &lt;a href=&quot;http://bourbon.io/&quot;&gt;Bourbon&lt;/a&gt; and &lt;a href=&quot;http://neat.bourbon.io/&quot;&gt;Neat&lt;/a&gt; as well as &lt;a href=&quot;http://refills.bourbon.io/&quot;&gt;Refills&lt;/a&gt; to scaffold it together.&lt;/p&gt;

&lt;p&gt;What you can expect from me in the near future:
* Updates on a Rails app that uses the Google Calendar API
* Updates on learning Angular 2 and a front-end JavaScript framework in general
* Work on updating Adobe InDesign JavaScript&lt;/p&gt;

</description>
        <pubDate>Sat, 03 Sep 2016 19:35:09 -0500</pubDate>
        <link>http://rfeie.com/2016/09/03/blog-welcome-to-my-new-site.html</link>
        <guid isPermaLink="true">http://rfeie.com/2016/09/03/blog-welcome-to-my-new-site.html</guid>
        
        <category>news</category>
        
        
      </item>
    
      <item>
        <title>Anything you don't own wrap in a class or adapter</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://thoughtbot.com/upcase/&quot;&gt;upcase.com&lt;/a&gt; Weekly iteration on testing APIs&lt;/p&gt;

&lt;p&gt;Ideally if you are interacting with the outside world either through APIs or outside gems you should be putting your connection to it into a wrapper or adapter class. This creates an internal API for the outside source you can control. So if you want to substitute the what is in the wrapper or if the outside API changes you have a central place to change or fix.&lt;/p&gt;

</description>
        <pubDate>Thu, 18 Aug 2016 19:35:09 -0500</pubDate>
        <link>http://rfeie.com/2016/08/18/fn-wrapping-an-api.html</link>
        <guid isPermaLink="true">http://rfeie.com/2016/08/18/fn-wrapping-an-api.html</guid>
        
        <category>testing</category>
        
        <category>api</category>
        
        
      </item>
    
      <item>
        <title>Testing is the canary in the coal mine. If testing is hard, refactor the code.</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.poodr.com//&quot;&gt;Practical Object-Oriented Design in Ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a type of code smell. If you are trying to test a part or all of your program and you are having a lot of trouble it should be a warning sign that the code is either not well structured or you need to consider refactoring the portion that is giving you trouble.&lt;/p&gt;

</description>
        <pubDate>Thu, 18 Aug 2016 19:35:09 -0500</pubDate>
        <link>http://rfeie.com/2016/08/18/fn-testing-canary-in-coal-mine.html</link>
        <guid isPermaLink="true">http://rfeie.com/2016/08/18/fn-testing-canary-in-coal-mine.html</guid>
        
        <category>testing</category>
        
        <category>clean-code</category>
        
        
      </item>
    
      <item>
        <title>Keep Controllers Simple, ideally you should restrict yourself to the seven basic verbs</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://thoughtbot.com/upcase/&quot;&gt;upcase.com&lt;/a&gt; TDD Rails Trail&lt;/p&gt;

&lt;p&gt;This is a short-hand rule or code smell in Rails to avoid putting too much responsibility in the controller. Any Model related code should go into the model. And if you have a lot of extra responsibility in a controller consider refactoring that responsiblity into another controller.&lt;/p&gt;

</description>
        <pubDate>Thu, 18 Aug 2016 19:35:09 -0500</pubDate>
        <link>http://rfeie.com/2016/08/18/fn-keep-controllers-simple-seven-verbs.html</link>
        <guid isPermaLink="true">http://rfeie.com/2016/08/18/fn-keep-controllers-simple-seven-verbs.html</guid>
        
        <category>ruby-on-rails</category>
        
        <category>clean-code</category>
        
        
      </item>
    
      <item>
        <title>Errors handling should be foundational to your program</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/8th-light-university/events/232280756/&quot;&gt;8th Light University&lt;/a&gt; Facing Failure&lt;/p&gt;

&lt;p&gt;How your programs handles errors should be as well thought out as how you structure any other large part of your program. Errors are often forgotten or intermingled in the execution code. Making the program hard to reason and hard to update.&lt;/p&gt;

</description>
        <pubDate>Thu, 18 Aug 2016 19:35:09 -0500</pubDate>
        <link>http://rfeie.com/2016/08/18/fn-errors-as-values.html</link>
        <guid isPermaLink="true">http://rfeie.com/2016/08/18/fn-errors-as-values.html</guid>
        
        <category>clean-code</category>
        
        
      </item>
    
      <item>
        <title>Code should be designed like a M&amp;M.</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/8th-light-university/events/232280756/&quot;&gt;8th Light University&lt;/a&gt; Facing Failure&lt;/p&gt;

&lt;p&gt;Ultimately this is related to separation of concerns. This imagines a program as a M&amp;amp;M With the center being what you want the code to do and the candy shell handling the connection outside world, this includes security, data access, and error handling.&lt;/p&gt;

</description>
        <pubDate>Thu, 18 Aug 2016 19:35:09 -0500</pubDate>
        <link>http://rfeie.com/2016/08/18/fn-designing-code-candy-bar.html</link>
        <guid isPermaLink="true">http://rfeie.com/2016/08/18/fn-designing-code-candy-bar.html</guid>
        
        <category>clean-code</category>
        
        
      </item>
    
  </channel>
</rss>
